#!/usr/bin/env python
import os

Import("env")
Import("env_modules")

def find_header_dirs():
    hpp_dirs = set()
    for root, _, files in os.walk("."):
        if any(file.endswith(".hpp") or file.endswith(".h") for file in files):
            hpp_dirs.add(root)
    return list(hpp_dirs)

def find_cpp_files(env):
    sources = []
    for dirpath, _, _ in os.walk("."):
        cpp_files = env.Glob(os.path.join(dirpath, "*.cpp"))
        sources.extend(cpp_files)
    return env.Flatten(sources)

def using_clang(env):
    return "clang" in os.path.basename(env["CC"])

def using_gcc(env):
    return "gcc" in os.path.basename(env["CC"])

# Clone module env
env_game = env_modules.Clone()

# Add dependencies
SConscript("../deps/SCsub", "env_game")

# Get sources
sources = find_cpp_files(env_game)
env_game.Append(CPPPATH=find_header_dirs())

# Enable C++23
if not env_game.msvc:
	env_game["CXXFLAGS"].remove("-std=gnu++17")
	env_game["CXXFLAGS"].insert(0, "-std=gnu++23")
else:
	env_game["CXXFLAGS"].remove("/std:c++17")
	env_game["CXXFLAGS"].insert(0, "/std:c++23")

# Enable warnings in debug mode
if env_game.debug_features:
	env_game.Append(
	    CXXFLAGS=[
	    	"-Wall",
	    	"-Wextra",
	    	"-Wshadow",
	    	# Disable warnings from GDCLASS stuff
	    	"-Wno-unused-parameter",
	    	# Disable warnings from entt
	    	"-Wno-shadow-uncaptured-local"
	    ]
	)

	if using_clang(env_game):
		env_game.Append(CXXFLAGS=["-Wimplicit-fallthrough", "-Wno-deprecated-volatile", "-Wno-missing-designated-field-initializers",])
		env_game.Append(CXXFLAGS=["-pedantic", "-Wno-nested-anon-types", "-Wno-gnu-anonymous-struct", "-Wno-extra-semi"])

	if using_gcc(env_game):
		env_game.Append(
		    CXXFLAGS=["-Wno-volatile"]
		)

# Shared lib compilation
if ARGUMENTS.get('game_shared', 'no') == 'yes':
	env_game.Append(CCFLAGS=['-fPIC'])
	env_game['LIBS'] = []
	shared_lib = env_game.SharedLibrary(target='#bin/game', source=sources)
	shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
	env.Append(LIBS=[shared_lib_shim])
	env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    env_game.add_source_files(env.modules_sources, sources)
